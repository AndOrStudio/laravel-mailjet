{
    "docs": [
        {
            "location": "/",
            "text": "Laravel Mailjet\n\n\n\n\n\n\n\n\n\n\nLaravel package for handling Mailjet API V3 using this wrapper: \nhttps://github.com/mailjet/mailjet-apiv3-php\n\n\nIt also provide a mailjetTransport for \nLaravel mail feature\n\n\nInstallation\n\n\nFirst, include the package in your dependencies\n\n\ncomposer require mailjet/laravel-mailjet\n\n\n\nThen, you need to add some informations in your configuration files\n\n\n\n\nIn the providers array add the service providers you want to use, for example:\n\n\n\n\n'providers' => [\n\n\n    ...\n\n\n    Mailjet\\LaravelMailjet\\MailjetServiceProvider::class,\n\n\n    Mailjet\\LaravelMailjet\\MailjetMailServiceProvider::class,\n\n\n    ...\n\n\n    Mailjet\\LaravelMailjet\\Providers\\CampaignDraftServiceProvider::class\n\n\n]\n\n\n\n\n\n\n\nIn the aliases array\n\n\n\n\n'aliases' => [\n\n\n    ...\n\n\n    'Mailjet' => Mailjet\\LaravelMailjet\\Facades\\Mailjet::class,\n\n\n    ...\n\n\n]\n\n\n\n\n\n\n\nIn the services.php file\n\n\n\n\nmailjet' => [\n\n\n    'key' => env('MAILJET_APIKEY'),\n\n\n    'secret' => env('MAILJET_APISECRET'),\n\n\n]\n\n\n\n\n\n\n\nIn your .env file\n\n\n\n\nMAILJET_APIKEY=YOUR_APIKEY\n\n\nMAILJET_APISECRET=YOUR_APISECRET\n\n\n\n\n\nUsage\n\n\nTo use it, you need to import the Mailjet Facade or any of the available Service-provider contracts in your file\n\n\nuse Mailjet\\LaravelMailjet\\Facades\\Mailjet;\n.....\nuse Mailjet\\LaravelMailjet\\Contracts\\CampaignDraftContract;\n\n\n\nThen, in your code you can use one of the method available in the MailjetServices :\n\n\nLow level API methods:\n\n\n\n\nMailjet::get($resource, $args, $options)\n\n\nMailjet::post($resource, $args, $options)\n\n\nMailjet::put($resource, $args, $options)\n\n\nMailjet::delete($resource, $args, $options)\n\n\n\n\nHigh level API methods:\n\n\n\n\nMailjet::getAllLists($filters)\n\n\nMailjet::createList($body)\n\n\nMailjet::getListRecipients($filters)\n\n\nMailjet::getSingleContact($id)\n\n\nMailjet::createContact($body)\n\n\nMailjet::createListRecipient($body)\n\n\nMailjet::editListrecipient($id, $body)\n\n\n\n\nFor more informations about the filters you can use in each methods, refer to the \nMailjet API documentation\n\n\nAll method return Mailjet\\Response or throw a MailjetException in case of API error.\n\n\nYou can also get the client with the method \ngetClient()\n and make your own request to Mailjet API.",
            "title": "Home"
        },
        {
            "location": "/#laravel-mailjet",
            "text": "Laravel package for handling Mailjet API V3 using this wrapper:  https://github.com/mailjet/mailjet-apiv3-php  It also provide a mailjetTransport for  Laravel mail feature",
            "title": "Laravel Mailjet"
        },
        {
            "location": "/#installation",
            "text": "First, include the package in your dependencies  composer require mailjet/laravel-mailjet  Then, you need to add some informations in your configuration files   In the providers array add the service providers you want to use, for example:   'providers' => [      ...      Mailjet\\LaravelMailjet\\MailjetServiceProvider::class,      Mailjet\\LaravelMailjet\\MailjetMailServiceProvider::class,      ...      Mailjet\\LaravelMailjet\\Providers\\CampaignDraftServiceProvider::class  ]    In the aliases array   'aliases' => [      ...      'Mailjet' => Mailjet\\LaravelMailjet\\Facades\\Mailjet::class,      ...  ]    In the services.php file   mailjet' => [      'key' => env('MAILJET_APIKEY'),      'secret' => env('MAILJET_APISECRET'),  ]    In your .env file   MAILJET_APIKEY=YOUR_APIKEY  MAILJET_APISECRET=YOUR_APISECRET",
            "title": "Installation"
        },
        {
            "location": "/#usage",
            "text": "To use it, you need to import the Mailjet Facade or any of the available Service-provider contracts in your file  use Mailjet\\LaravelMailjet\\Facades\\Mailjet;\n.....\nuse Mailjet\\LaravelMailjet\\Contracts\\CampaignDraftContract;  Then, in your code you can use one of the method available in the MailjetServices :  Low level API methods:   Mailjet::get($resource, $args, $options)  Mailjet::post($resource, $args, $options)  Mailjet::put($resource, $args, $options)  Mailjet::delete($resource, $args, $options)   High level API methods:   Mailjet::getAllLists($filters)  Mailjet::createList($body)  Mailjet::getListRecipients($filters)  Mailjet::getSingleContact($id)  Mailjet::createContact($body)  Mailjet::createListRecipient($body)  Mailjet::editListrecipient($id, $body)   For more informations about the filters you can use in each methods, refer to the  Mailjet API documentation  All method return Mailjet\\Response or throw a MailjetException in case of API error.  You can also get the client with the method  getClient()  and make your own request to Mailjet API.",
            "title": "Usage"
        },
        {
            "location": "/configuration/",
            "text": "Full configuration\n\n\n'mailjet' => [\n\n\n    'key' => env('MAILJET_APIKEY'),\n\n\n    'secret' => env('MAILJET_APISECRET'),\n\n\n    'transactionnal' => [\n\n\n        'call' => true,\n\n\n        'options' => [\n\n\n            'url' => 'api.mailjet.com',\n\n\n            'version' => 'v3.1',\n\n\n            'call' => true,\n\n\n            'secured' => true\n\n\n        ]\n\n\n    ],\n\n\n    'common' => [\n\n\n        'call' => true,\n\n\n        'options' => [\n\n\n            'url' => 'api.mailjet.com',\n\n\n            'version' => 'v3',\n\n\n            'call' => true,\n\n\n            'secured' => true\n\n\n        ]\n\n\n    ]\n\n\n]\n\n\n\nYou can pass settings to \nMailjetClient\n.\n\n\n\n\ntransactional\n: settings to Send API client\n\n\ncommon\n: setting to MailjetClient accessible throught the Facade Mailjet.\n\n\nurl\n (Default: api.mailjet.com) : domain name of the API\nversion (Default: v3) : API version (only working for Mailjet API V3 +)\n\n\ncall\n (Default: true) : turns on(true) / off the call to the API\n\n\nsecured\n (Default: true) : turns on(true) / off the use of 'https'\n\n\n\n\nMail driver configuration\n\n\nIn order to use Mailjet as Mail driver, you need to change the mail driver in your \nconfig/mail.php\n or your \n.env\n file to \nMAIL_DRIVER=mailjet\n, and make sure you have a valid and authorised from-address configured on your Mailjet account.\n\n\nFor usage, check the \nLaravel mail documentation",
            "title": "Configuration"
        },
        {
            "location": "/configuration/#full-configuration",
            "text": "'mailjet' => [      'key' => env('MAILJET_APIKEY'),      'secret' => env('MAILJET_APISECRET'),      'transactionnal' => [          'call' => true,          'options' => [              'url' => 'api.mailjet.com',              'version' => 'v3.1',              'call' => true,              'secured' => true          ]      ],      'common' => [          'call' => true,          'options' => [              'url' => 'api.mailjet.com',              'version' => 'v3',              'call' => true,              'secured' => true          ]      ]  ]  \nYou can pass settings to  MailjetClient .   transactional : settings to Send API client  common : setting to MailjetClient accessible throught the Facade Mailjet.  url  (Default: api.mailjet.com) : domain name of the API\nversion (Default: v3) : API version (only working for Mailjet API V3 +)  call  (Default: true) : turns on(true) / off the call to the API  secured  (Default: true) : turns on(true) / off the use of 'https'",
            "title": "Full configuration"
        },
        {
            "location": "/configuration/#mail-driver-configuration",
            "text": "In order to use Mailjet as Mail driver, you need to change the mail driver in your  config/mail.php  or your  .env  file to  MAIL_DRIVER=mailjet , and make sure you have a valid and authorised from-address configured on your Mailjet account.  For usage, check the  Laravel mail documentation",
            "title": "Mail driver configuration"
        },
        {
            "location": "/usage/",
            "text": "Examples\n\n\nRetrieve Mailjet Client Object to make custom MailJet API V3 requests\n\n\nYou can retrieve the MailjetClient, as defined in the PHP \nwrapper\n, with the method getClient() and make your own request to Mailjet API.\n* In the providers array\n\n\n'providers' => [\n\n\n    ...\n\n\n    Mailjet\\LaravelMailjet\\MailjetServiceProvider::class,\n\n\n    Mailjet\\LaravelMailjet\\MailjetMailServiceProvider::class,\n\n\n    ...\n\n\n]\n\n\n\n\n\n\n\nIn the aliases array\n\n\n\n\n'aliases' => [\n\n\n    ...\n\n\n    'Mailjet' => Mailjet\\LaravelMailjet\\Facades\\Mailjet::class,\n\n\n    ...\n\n\n]\n\n\n\nTo use it, you need to import Mailjet Facade in your file\n\n\nuse Mailjet\\LaravelMailjet\\Facades\\Mailjet;\n\n\n\nExample:\n\n\n<?php\n\n    \nuse\n \n\\Mailjet\\Resources\n;\n\n    \nuse\n \nMailjet\\LaravelMailjet\\Facades\\Mailjet\n;\n\n\n    \n...\n\n    \n$mailjet\n \n=\n \nMailjet\n::\ngetClient\n();\n\n\n    \n// Resources are all located in the Resources class\n\n    \n$response\n \n=\n \n$mailjet\n->\nget\n(\nResources\n::\n$Contact\n);\n\n\n    \n/*\n\n\n      Read the response\n\n\n    */\n\n    \nif\n \n(\n$response\n->\nsuccess\n())\n\n      \nvar_dump\n(\n$response\n->\ngetData\n());\n\n    \nelse\n\n      \nvar_dump\n(\n$response\n->\ngetStatus\n());\n\n\n    \n...\n\n    \n// Send transactional emails (note: prefer using SwiftMailer to send transactionnal emails)\n\n\n    \n$body\n \n=\n \n[\n\n        \n'FromEmail'\n \n=>\n \n\"pilot@mailjet.com\"\n,\n\n        \n'FromName'\n \n=>\n \n\"Mailjet Pilot\"\n,\n\n        \n'Subject'\n \n=>\n \n\"Your email flight plan!\"\n,\n\n        \n'Text-part'\n \n=>\n \n\"Dear passenger, welcome to Mailjet! May the delivery force be with you!\"\n,\n\n        \n'Html-part'\n \n=>\n \n\"<h3>Dear passenger, welcome to Mailjet!</h3><br />May the delivery force be with you!\"\n,\n\n        \n'Recipients'\n \n=>\n \n[[\n'Email'\n \n=>\n \n\"passenger@mailjet.com\"\n]]\n\n    \n];\n\n\n    \n$response\n \n=\n \n$mailjet\n->\npost\n(\nResources\n::\n$Email\n,\n \n[\n'body'\n \n=>\n \n$body\n]);\n\n\n\n\n\nPrepare & Send a Campaign Draft\n\n\nTo create a campaign draft, perform a POST on the /campaigndraft . Required fields are a Locale, Sender, SenderEmail, Subject and ContactsListID.\nIn the providers array inside app.php add:\n\n\nMailjet\\LaravelMailjet\\Providers\\CampaignDraftServiceProvider::class\n\n\n\nYou can access the \n/campaigndraft\n api through the CampaignDraftContract.\n\n\nExample:\n\n\n<?php\n\n\nuse\n \nMailjet\\LaravelMailjet\\Contracts\\CampaignDraftContract\n;\n\n\nuse\n \nMailjet\\LaravelMailjet\\Model\\CampaignDraft\n;\n\n\n// ...\n\n\npublic\n \nfunction\n \ncampaignDraftExample\n(\nCampaignDraftContract\n \n$campaignDraftManager\n \n)\n \n{\n\n    \n// ...\n\n    \n$optionalProp\n[\n'Title'\n]\n \n=\n \n'Friday newsletter'\n;\n\n    \n$optionalProp\n[\n'SenderName'\n]\n \n=\n \n'Mailjet team'\n;\n\n    \n$optionalProp\n[\n'EditMode'\n]\n \n=\n \n'html2'\n;\n\n    \n$campaignDraft\n \n=\n \nnew\n \nCampaignDraft\n(\n\"en_US\"\n,\n \n\"Lyubo\"\n,\n \n\"api@mailjet.com\"\n,\n \n\"Laravel bundle test\"\n,\n \n\"5410\"\n);\n\n    \n$campaignDraft\n->\nsetOptionalProperties\n(\n$optionalProp\n);\n\n    \n$campaignDraftManager\n->\ncreate\n(\n$campaignDraft\n);\n\n\n\n\n}\n\n\n\nNow that we have a campaign draft, we can add the most important property: its content, which can be Text or Html (Text-part or Html-part).\n\n\n    $content = ['Html-part' => \"Hello <strong>world</strong>!\",\n\n\n        'Text-part' => \"Hello world!\"];\n\n\n    $campaignDraft->setContent($content);\n\n\n    $campaignDraftManager->createDetailContent($campaignDraft->getId(), $campaignDraft->getContent());\n\n\n\n\n\nOnce the campaign draft is completely set up, it can be sent through the CampaignDraftContract.\n\n     /*     * Send the a campaigndraft** */\n\n\n    $campaignDraftManager->sendCampaign($campaignDraft->getId());\n\n\n\n\nStoring & Sending a Template\n\n\nThe /template resource allows to store your template on the Mailjet system.\nTo create a template you need to specify it's name.\n\n\nYou can than reuse the template at will for your messages by referencing the ID returned when created\n\n\nIn the providers array inside app.php add:\n\n\nMailjet\\LaravelMailjet\\Providers\\TemplateServiceProvider::class\n\n\n\nYou can access the \n/template\n api through the TemplateContract.\n\n\nCreate Template Example:\n\n\n<?php\n\n\nuse\n \nMailjet\\LaravelMailjet\\Contracts\\TemplateContract\n;\n\n\nuse\n \nMailjet\\LaravelMailjet\\Model\\Template\n;\n\n\n\n// ...\n\n\npublic\n \nfunction\n \ntemplateExample\n(\nTemplateContract\n \n$templateManager\n)\n \n{\n\n    \n// ...\n\n        \n//Example create template\n\n        \n$optionalProp\n[\n'Author'\n]\n \n=\n \n'Mailjet team'\n;\n\n        \n$optionalProp\n[\n'EditMode'\n]\n \n=\n \n1\n;\n\n        \n$optionalProp\n[\n'Purposes'\n]\n \n=\n \n[\n'transactional'\n];\n\n        \n$template\n \n=\n \nnew\n \nTemplate\n(\n\"Laravel Template Example!!! \"\n,\n \n$optionalProp\n);\n\n\n        \n$ID\n \n=\n \n$templateManager\n->\ncreate\n(\n$template\n)[\n0\n][\n'ID'\n];\n\n\n        \n//Add content to a template\n\n        \n$contentData\n \n=\n \n[\n\n            \n'Html-part'\n \n=>\n \n\"<html><body><p>Hello {{var:name}}</p></body></html>\"\n,\n\n            \n'Text-part'\n \n=>\n \n\"Hello {{var:name}}\"\n\n        \n];\n\n        \n$templateManager\n->\ncreateDetailContent\n(\n$ID\n,\n \n$contentData\n);\n\n\n        \n//Example list all templates based on multiple filters\n\n        \n$filters\n[\n'OwnerType'\n]\n=\n'apikey'\n;\n\n        \n$filters\n[\n'EditMode'\n]\n=\n1\n;\n\n        \n$result\n=\n$templateManager\n->\ngetAll\n(\n$filters\n);\n\n\n}\n\n\n\nTo send the template you use the Mj-TemplateID property in your Send API payload to specify the ID of the the template you created.\n\n\nYou must set the Mj-TemplateLanguage property in the payload at true to have the templating language interpreted.\n\n\nSend Template Example:\n\n<?php\n\n    \nuse\n \n\\Mailjet\\Resources\n;\n\n    \nuse\n \nMailjet\\LaravelMailjet\\Facades\\Mailjet\n;\n\n    \n...\n\n    \n$mj\n \n=\n \nMailjet\n::\ngetClient\n();\n\n    \n$body\n \n=\n \n[\n\n    \n'FromEmail'\n \n=>\n \n\"pilot@mailjet.com\"\n,\n\n    \n'FromName'\n \n=>\n \n\"Mailjet Pilot\"\n,\n\n    \n'Subject'\n \n=>\n \n\"Your email flight plan!\"\n,\n\n    \n'MJ-TemplateID'\n \n=>\n \n$ID\n,\n\n    \n'MJ-TemplateLanguage'\n \n=>\n \ntrue\n,\n\n    \n'Recipients'\n \n=>\n \n[[\n'Email'\n \n=>\n \n\"passenger@mailjet.com\"\n]]\n\n\n];\n\n\n$response\n \n=\n  \n$mj\n->\npost\n(\nResources\n::\n$Email\n,\n \n[\n'body'\n \n=>\n \n$body\n]);\n\n\n$response\n->\nsuccess\n()\n \n&&\n \nvar_dump\n(\n$response\n->\ngetData\n());\n\n\n\n\nCampaigns Example\n\n\nIn the providers array inside app.php add:\n\n\nMailjet\\LaravelMailjet\\Providers\\CampaignServiceProvider::class\n\n\n\nYou can  access the \n/campaign\n API through the CampaignContract.\n\n\nExample:\n\n\n<?php\n\n\n\nuse\n \nMailjet\\LaravelMailjet\\Contracts\\CampaignContract\n;\n\n\nuse\n \nMailjet\\LaravelMailjet\\Model\\Campaign\n;\n\n    \n// ...\n\n\npublic\n \nfunction\n \ncampaignExample\n(\nCampaignContract\n \n$campaignManager\n \n)\n \n{\n\n        \n// ...\n\n        \n//Example retrieve all (limit 10 :) ) stared campaigns\n\n        \n$result\n \n=\n \n$campaignManager\n->\ngetAllCampaigns\n(\n$filters\n);\n\n\n}\n\n\n\n\n\nChange User's email address\n\n\nIn the providers array inside app.php add:\n\n\n Mailjet\\LaravelMailjet\\Providers\\ContactsListServiceProvider::class\n\n\n\n<?php\n\n\n\nuse\n \nMailjet\\LaravelMailjet\\Contracts\\ContactsListContract\n;\n\n\nuse\n \nMailjet\\LaravelMailjet\\Model\\Contact\n;\n\n\n\npublic\n \nfunction\n \nchangeEmailAddress\n(\nContactsListContract\n \n$ContactsListManager\n,\n \n$oldEmail\n,\n \n$newEmail\n,\n$listId\n)\n\n\n{\n\n    \n// ...\n\n    \n$contact\n \n=\n \nnew\n \nContact\n(\n$newEmail\n);\n\n\n      \n$ContactsListManager\n->\nupdateEmail\n(\n$listId\n,\n$contact\n,\n$oldEmail\n);\n\n\n\n}",
            "title": "Examples"
        },
        {
            "location": "/usage/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/usage/#retrieve-mailjet-client-object-to-make-custom-mailjet-api-v3-requests",
            "text": "You can retrieve the MailjetClient, as defined in the PHP  wrapper , with the method getClient() and make your own request to Mailjet API.\n* In the providers array  'providers' => [      ...      Mailjet\\LaravelMailjet\\MailjetServiceProvider::class,      Mailjet\\LaravelMailjet\\MailjetMailServiceProvider::class,      ...  ]    In the aliases array   'aliases' => [      ...      'Mailjet' => Mailjet\\LaravelMailjet\\Facades\\Mailjet::class,      ...  ]  \nTo use it, you need to import Mailjet Facade in your file  use Mailjet\\LaravelMailjet\\Facades\\Mailjet;  Example:  <?php \n     use   \\Mailjet\\Resources ; \n     use   Mailjet\\LaravelMailjet\\Facades\\Mailjet ; \n\n     ... \n     $mailjet   =   Mailjet :: getClient (); \n\n     // Resources are all located in the Resources class \n     $response   =   $mailjet -> get ( Resources :: $Contact ); \n\n     /*        Read the response      */ \n     if   ( $response -> success ()) \n       var_dump ( $response -> getData ()); \n     else \n       var_dump ( $response -> getStatus ()); \n\n     ... \n     // Send transactional emails (note: prefer using SwiftMailer to send transactionnal emails) \n\n     $body   =   [ \n         'FromEmail'   =>   \"pilot@mailjet.com\" , \n         'FromName'   =>   \"Mailjet Pilot\" , \n         'Subject'   =>   \"Your email flight plan!\" , \n         'Text-part'   =>   \"Dear passenger, welcome to Mailjet! May the delivery force be with you!\" , \n         'Html-part'   =>   \"<h3>Dear passenger, welcome to Mailjet!</h3><br />May the delivery force be with you!\" , \n         'Recipients'   =>   [[ 'Email'   =>   \"passenger@mailjet.com\" ]] \n     ]; \n\n     $response   =   $mailjet -> post ( Resources :: $Email ,   [ 'body'   =>   $body ]);",
            "title": "Retrieve Mailjet Client Object to make custom MailJet API V3 requests"
        },
        {
            "location": "/usage/#prepare-send-a-campaign-draft",
            "text": "To create a campaign draft, perform a POST on the /campaigndraft . Required fields are a Locale, Sender, SenderEmail, Subject and ContactsListID.\nIn the providers array inside app.php add:  Mailjet\\LaravelMailjet\\Providers\\CampaignDraftServiceProvider::class  You can access the  /campaigndraft  api through the CampaignDraftContract.  Example:  <?php  use   Mailjet\\LaravelMailjet\\Contracts\\CampaignDraftContract ;  use   Mailjet\\LaravelMailjet\\Model\\CampaignDraft ;  // ...  public   function   campaignDraftExample ( CampaignDraftContract   $campaignDraftManager   )   { \n     // ... \n     $optionalProp [ 'Title' ]   =   'Friday newsletter' ; \n     $optionalProp [ 'SenderName' ]   =   'Mailjet team' ; \n     $optionalProp [ 'EditMode' ]   =   'html2' ; \n     $campaignDraft   =   new   CampaignDraft ( \"en_US\" ,   \"Lyubo\" ,   \"api@mailjet.com\" ,   \"Laravel bundle test\" ,   \"5410\" ); \n     $campaignDraft -> setOptionalProperties ( $optionalProp ); \n     $campaignDraftManager -> create ( $campaignDraft );  }  \nNow that we have a campaign draft, we can add the most important property: its content, which can be Text or Html (Text-part or Html-part).      $content = ['Html-part' => \"Hello <strong>world</strong>!\",          'Text-part' => \"Hello world!\"];      $campaignDraft->setContent($content);      $campaignDraftManager->createDetailContent($campaignDraft->getId(), $campaignDraft->getContent());   Once the campaign draft is completely set up, it can be sent through the CampaignDraftContract.      /*     * Send the a campaigndraft** */      $campaignDraftManager->sendCampaign($campaignDraft->getId());",
            "title": "Prepare &amp; Send a Campaign Draft"
        },
        {
            "location": "/usage/#storing-sending-a-template",
            "text": "The /template resource allows to store your template on the Mailjet system.\nTo create a template you need to specify it's name.  You can than reuse the template at will for your messages by referencing the ID returned when created  In the providers array inside app.php add:  Mailjet\\LaravelMailjet\\Providers\\TemplateServiceProvider::class  You can access the  /template  api through the TemplateContract.  Create Template Example:  <?php  use   Mailjet\\LaravelMailjet\\Contracts\\TemplateContract ;  use   Mailjet\\LaravelMailjet\\Model\\Template ;  // ...  public   function   templateExample ( TemplateContract   $templateManager )   { \n     // ... \n         //Example create template \n         $optionalProp [ 'Author' ]   =   'Mailjet team' ; \n         $optionalProp [ 'EditMode' ]   =   1 ; \n         $optionalProp [ 'Purposes' ]   =   [ 'transactional' ]; \n         $template   =   new   Template ( \"Laravel Template Example!!! \" ,   $optionalProp ); \n\n         $ID   =   $templateManager -> create ( $template )[ 0 ][ 'ID' ]; \n\n         //Add content to a template \n         $contentData   =   [ \n             'Html-part'   =>   \"<html><body><p>Hello {{var:name}}</p></body></html>\" , \n             'Text-part'   =>   \"Hello {{var:name}}\" \n         ]; \n         $templateManager -> createDetailContent ( $ID ,   $contentData ); \n\n         //Example list all templates based on multiple filters \n         $filters [ 'OwnerType' ] = 'apikey' ; \n         $filters [ 'EditMode' ] = 1 ; \n         $result = $templateManager -> getAll ( $filters );  }  \nTo send the template you use the Mj-TemplateID property in your Send API payload to specify the ID of the the template you created.  You must set the Mj-TemplateLanguage property in the payload at true to have the templating language interpreted.  Send Template Example: <?php \n     use   \\Mailjet\\Resources ; \n     use   Mailjet\\LaravelMailjet\\Facades\\Mailjet ; \n     ... \n     $mj   =   Mailjet :: getClient (); \n     $body   =   [ \n     'FromEmail'   =>   \"pilot@mailjet.com\" , \n     'FromName'   =>   \"Mailjet Pilot\" , \n     'Subject'   =>   \"Your email flight plan!\" , \n     'MJ-TemplateID'   =>   $ID , \n     'MJ-TemplateLanguage'   =>   true , \n     'Recipients'   =>   [[ 'Email'   =>   \"passenger@mailjet.com\" ]]  ];  $response   =    $mj -> post ( Resources :: $Email ,   [ 'body'   =>   $body ]);  $response -> success ()   &&   var_dump ( $response -> getData ());",
            "title": "Storing &amp; Sending a Template"
        },
        {
            "location": "/usage/#campaigns-example",
            "text": "In the providers array inside app.php add:  Mailjet\\LaravelMailjet\\Providers\\CampaignServiceProvider::class  You can  access the  /campaign  API through the CampaignContract.  Example:  <?php  use   Mailjet\\LaravelMailjet\\Contracts\\CampaignContract ;  use   Mailjet\\LaravelMailjet\\Model\\Campaign ; \n     // ...  public   function   campaignExample ( CampaignContract   $campaignManager   )   { \n         // ... \n         //Example retrieve all (limit 10 :) ) stared campaigns \n         $result   =   $campaignManager -> getAllCampaigns ( $filters );  }",
            "title": "Campaigns Example"
        },
        {
            "location": "/usage/#change-users-email-address",
            "text": "In the providers array inside app.php add:   Mailjet\\LaravelMailjet\\Providers\\ContactsListServiceProvider::class  <?php  use   Mailjet\\LaravelMailjet\\Contracts\\ContactsListContract ;  use   Mailjet\\LaravelMailjet\\Model\\Contact ;  public   function   changeEmailAddress ( ContactsListContract   $ContactsListManager ,   $oldEmail ,   $newEmail , $listId )  { \n     // ... \n     $contact   =   new   Contact ( $newEmail ); \n\n       $ContactsListManager -> updateEmail ( $listId , $contact , $oldEmail );  }",
            "title": "Change User's email address"
        },
        {
            "location": "/mailjet-doc/",
            "text": "Mailjet Documentation\n\n\n\n\nAPI Guides\n\n\nAPI Reference",
            "title": "Mailjet Doc"
        },
        {
            "location": "/mailjet-doc/#mailjet-documentation",
            "text": "API Guides  API Reference",
            "title": "Mailjet Documentation"
        },
        {
            "location": "/CONTRIBUTING/",
            "text": "CONTRIBUTING\n\n\n(To be updated :))\n\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please make sure you do not include your API credentials.\n\n\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\n* \nContributing to Open Source guide\n\n\nSteps\n\n\n\n\nCreate an Issue\n\n\nPull Request\n\n\nMerge \\o/\n\n\n\n\nContributors\n\n\n\n\nOriginal author: \nGaetan DELBART\n, \nTitouan BENOIT\n\n\nMailjet API \napi@mailjet.com",
            "title": "Contributing"
        },
        {
            "location": "/CONTRIBUTING/#contributing",
            "text": "(To be updated :))  When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please make sure you do not include your API credentials.  Please note we have a code of conduct, please follow it in all your interactions with the project.\n*  Contributing to Open Source guide",
            "title": "CONTRIBUTING"
        },
        {
            "location": "/CONTRIBUTING/#steps",
            "text": "Create an Issue  Pull Request  Merge \\o/",
            "title": "Steps"
        },
        {
            "location": "/CONTRIBUTING/#contributors",
            "text": "Original author:  Gaetan DELBART ,  Titouan BENOIT  Mailjet API  api@mailjet.com",
            "title": "Contributors"
        }
    ]
}